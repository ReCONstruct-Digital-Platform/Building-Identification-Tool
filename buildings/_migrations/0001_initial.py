# Generated by Django 4.1.7 on 2023-11-24 14:27

import buildings.models.surveys
from django.conf import settings
import django.contrib.auth.validators
import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="EvalUnit",
            fields=[
                ("id", models.TextField(primary_key=True, serialize=False)),
                ("lat", models.FloatField(null=True)),
                ("lng", models.FloatField(null=True)),
                (
                    "point",
                    django.contrib.gis.db.models.fields.PointField(
                        null=True, srid=4326
                    ),
                ),
                ("lot_id", models.TextField(null=True)),
                (
                    "lot_geom",
                    django.contrib.gis.db.models.fields.MultiPolygonField(
                        null=True, srid=4326
                    ),
                ),
                ("year", models.SmallIntegerField()),
                ("muni", models.TextField()),
                ("muni_code", models.TextField(blank=True, null=True)),
                ("arrond", models.TextField(blank=True, null=True)),
                ("address", models.TextField()),
                ("num_adr_inf", models.TextField(blank=True, null=True)),
                ("num_adr_inf_2", models.TextField(blank=True, null=True)),
                ("num_adr_sup", models.TextField(blank=True, null=True)),
                ("num_adr_sup_2", models.TextField(blank=True, null=True)),
                ("street_name", models.TextField(blank=True, null=True)),
                ("apt_num", models.TextField(blank=True, null=True)),
                ("apt_num_1", models.TextField(blank=True, null=True)),
                ("apt_num_2", models.TextField(blank=True, null=True)),
                ("mat18", models.TextField()),
                ("cubf", models.IntegerField()),
                ("file_num", models.TextField(blank=True, null=True)),
                ("nghbr_unit", models.TextField(blank=True, null=True)),
                ("owner_date", models.DateField(blank=True, null=True)),
                ("owner_type", models.TextField(blank=True, null=True)),
                ("owner_status", models.TextField(blank=True, null=True)),
                ("lot_lin_dim", models.FloatField(blank=True, null=True)),
                ("lot_area", models.FloatField(blank=True, null=True)),
                ("max_floors", models.IntegerField(blank=True, null=True)),
                ("const_yr", models.IntegerField(blank=True, null=True)),
                ("const_yr_real", models.TextField(blank=True, null=True)),
                ("floor_area", models.FloatField(blank=True, null=True)),
                ("phys_link", models.TextField(blank=True, null=True)),
                ("const_type", models.TextField(blank=True, null=True)),
                ("num_dwelling", models.IntegerField(blank=True, null=True)),
                ("num_rental", models.IntegerField(blank=True, null=True)),
                ("num_non_res", models.IntegerField(blank=True, null=True)),
                ("apprais_date", models.DateField(blank=True, null=True)),
                ("lot_value", models.IntegerField(blank=True, null=True)),
                ("building_value", models.IntegerField(blank=True, null=True)),
                ("value", models.IntegerField(blank=True, null=True)),
                ("prev_value", models.IntegerField(blank=True, null=True)),
                ("associated", models.JSONField(blank=True, null=True)),
                (
                    "date_added",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date added"
                    ),
                ),
            ],
            options={
                "db_table": "evalunits",
            },
        ),
        migrations.CreateModel(
            name="Vote",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "date_added",
                    models.DateTimeField(auto_now_add=True, verbose_name="date added"),
                ),
                (
                    "date_modified",
                    models.DateTimeField(auto_now=True, verbose_name="date modified"),
                ),
                (
                    "eval_unit",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="buildings.evalunit",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="UploadImageJob",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "date_added",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date added"
                    ),
                ),
                (
                    "status",
                    models.TextField(
                        choices=[
                            ("pending", "Pending"),
                            ("in_progress", "In Progress"),
                            ("done", "Done"),
                            ("error", "Error"),
                        ],
                        default="pending",
                    ),
                ),
                ("job_data", models.JSONField()),
                (
                    "eval_unit",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="buildings.evalunit",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SurveyV1",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("self_similar_cluster", models.IntegerField(blank=True, null=True)),
                ("has_simple_footprint", models.BooleanField()),
                ("has_simple_volume", models.BooleanField()),
                ("num_storeys", models.IntegerField(blank=True, null=True)),
                ("has_basement", models.BooleanField(blank=True, null=True)),
                (
                    "site_obstructions",
                    buildings.models.surveys.JSONFieldForSpecify(blank=True, null=True),
                ),
                (
                    "appendages",
                    buildings.models.surveys.JSONFieldForSpecify(blank=True, null=True),
                ),
                ("exterior_cladding", buildings.models.surveys.JSONFieldForSpecify()),
                ("facade_condition", models.BooleanField(blank=True, null=True)),
                ("window_wall_ratio", models.BooleanField(blank=True, null=True)),
                ("large_irregular_windows", models.JSONField(blank=True, null=True)),
                ("roof_geometry", models.JSONField(blank=True, null=True)),
                ("new_or_renovated", models.JSONField(blank=True, null=True)),
                (
                    "vote",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE, to="buildings.vote"
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="NoBuildingFlag",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "vote",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE, to="buildings.vote"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="HLMBuilding",
            fields=[
                ("id", models.IntegerField(primary_key=True, serialize=False)),
                ("lat", models.FloatField(null=True)),
                ("lng", models.FloatField(null=True)),
                (
                    "point",
                    django.contrib.gis.db.models.fields.PointField(
                        null=True, srid=4326
                    ),
                ),
                ("streetview_available", models.BooleanField(null=True)),
                ("project_id", models.IntegerField()),
                ("organism", models.TextField()),
                ("service_center", models.TextField()),
                ("address", models.TextField(null=True)),
                ("street_num", models.TextField()),
                ("street_name", models.TextField()),
                ("muni", models.TextField()),
                ("postal_code", models.TextField()),
                ("num_dwellings", models.IntegerField()),
                ("num_floors", models.IntegerField()),
                ("area_footprint", models.FloatField()),
                ("area_total", models.FloatField()),
                ("ivp", models.FloatField()),
                ("disrepair_state", models.TextField()),
                ("interest_adjust_date", models.DateField(blank=True, null=True)),
                ("contract_end_date", models.DateField(blank=True, null=True)),
                ("category", models.TextField()),
                ("building_id", models.IntegerField()),
                (
                    "eval_unit",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="buildings.evalunit",
                    ),
                ),
            ],
            options={
                "db_table": "hlms",
            },
        ),
        migrations.CreateModel(
            name="EvalUnitStreetViewImage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("uuid", models.TextField()),
                (
                    "date_added",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date added"
                    ),
                ),
                (
                    "eval_unit",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="buildings.evalunit",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="EvalUnitSatelliteImage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("uuid", models.TextField()),
                (
                    "date_added",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date added"
                    ),
                ),
                (
                    "eval_unit",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="buildings.evalunit",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="EvalUnitLatestViewData",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "date_added",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date added"
                    ),
                ),
                ("sv_pano", models.TextField(blank=True, null=True)),
                ("sv_heading", models.FloatField(blank=True, null=True)),
                ("sv_pitch", models.FloatField(blank=True, null=True)),
                ("sv_zoom", models.FloatField(blank=True, null=True)),
                ("marker_lat", models.FloatField(blank=True, null=True)),
                ("marker_lng", models.FloatField(blank=True, null=True)),
                (
                    "eval_unit",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="buildings.evalunit",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
    ]
