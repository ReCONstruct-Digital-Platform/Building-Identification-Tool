name: Build, Test and Deploy

on:
  push:
    branches: '*'
  pull_request:
    branches: [ "main", "staging" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    # Service containers to run with `runner-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        # Matches Pythonanywhere versions of Postgres 12.2 and PostGIS 3.0
        image: postgis/postgis:12-3.0-alpine
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

    steps:
    - name: Check out code
      uses: actions/checkout@v3

    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: '3.10'

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends postgresql-client
        sudo apt-get install -y binutils libproj-dev gdal-bin
        psql postgresql://postgres:postgres@localhost:5432 -c "CREATE USER bitdbuser WITH PASSWORD 'password';"
        psql postgresql://postgres:postgres@localhost:5432 -c "ALTER ROLE bitdbuser SET client_encoding TO 'utf8';"
        psql postgresql://postgres:postgres@localhost:5432 -c "ALTER ROLE bitdbuser SET default_transaction_isolation TO 'read committed';"
        psql postgresql://postgres:postgres@localhost:5432 -c "ALTER ROLE bitdbuser SET timezone TO 'UTC';"
        psql postgresql://postgres:postgres@localhost:5432 -c "GRANT ALL ON SCHEMA public TO bitdbuser;"
        psql postgresql://postgres:postgres@localhost:5432 -c "ALTER USER bitdbuser SUPERUSER;"

    - name: Run Tests
      env: 
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
        GOOGLE_MAPS_API_KEY: ${{ secrets.GOOGLE_MAPS_API_KEY }}
        GOOGLE_SIGNING_SECRET: ${{ secrets.GOOGLE_SIGNING_SECRET }}
        MAPBOX_TOKEN: ${{ secrets.MAPBOX_TOKEN }}
        B2_KEYID_RW: ${{ secrets.B2_KEYID_RW }}
        B2_APPKEY_RW: ${{ secrets.B2_APPKEY_RW }}
        B2_ENDPOINT: ${{ secrets.B2_ENDPOINT }}
        B2_BUCKET_IMAGES: ${{ secrets.B2_BUCKET_IMAGES }}
        POSTGRES_NAME: bitdb
        POSTGRES_USER: bitdbuser
        POSTGRES_PW: password
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
      run: python manage.py test

  deploy:
    name: "Deploy to staging"
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/staging'
    steps:
      - name: (STAGING) Configure SSH credentials
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/staging.key
          chmod 600 ~/.ssh/staging.key
          cat >>~/.ssh/config <<END
          Host staging
            HostName $SSH_HOST
            User $SSH_USER
            IdentityFile ~/.ssh/staging.key
            StrictHostKeyChecking no
          END
        env:
          SSH_USER: ${{ secrets.PA_SSH_USER }}
          SSH_KEY: ${{ secrets.PA_SSH_KEY }}
          SSH_HOST: ${{ secrets.PA_SSH_HOST }}
      - name: (STAGING) Check out source
        run: ssh staging 'cd /home/lhovon/staging_bit && git stash push -m "local_changes_$(date +%s)" && git fetch && git reset --hard origin/staging'
      - name: (STAGING) Run migrations
        run: ssh staging 'cd /home/lhovon/staging_bit && /home/lhovon/.virtualenvs/stagingbitvenv/bin/python manage.py migrate'
      - name: (STAGING) Collectstatic
        run: ssh staging 'cd /home/lhovon/staging_bit && /home/lhovon/.virtualenvs/stagingbitvenv/bin/python manage.py collectstatic'
      - name: (STAGING) Restart server
        run: ssh staging 'touch /var/www/bit-staging-lhovon_pythonanywhere_com_wsgi.py'